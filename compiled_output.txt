----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\COMMIT_EDITMSG
----------------------------------------
Updated contracts and tests

Still having problems with testing

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\config
----------------------------------------
[core]
	repositoryformatversion = 0
	filemode = false
	bare = false
	logallrefupdates = true
	symlinks = false
	ignorecase = true
[lfs]
	repositoryformatversion = 0
[remote "origin"]
	url = https://github.com/fourtytwo42/EthDenver-Silverbacks-2025.git
	fetch = +refs/heads/*:refs/remotes/origin/*
[branch "main"]
	remote = origin
	merge = refs/heads/main

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\description
----------------------------------------
Silverbacks Entry to EthDenver 2025 Buidlathon
========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\FETCH_HEAD
----------------------------------------
d165918cd4e80e842cb7f03abbf86ed3c8eb42e4		branch 'main' of https://github.com/fourtytwo42/EthDenver-Silverbacks-2025

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\HEAD
----------------------------------------
ref: refs/heads/main

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\hooks\applypatch-msg.sample
----------------------------------------
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\hooks\commit-msg.sample
----------------------------------------
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\hooks\fsmonitor-watchman.sample
----------------------------------------
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\hooks\post-update.sample
----------------------------------------
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\hooks\pre-applypatch.sample
----------------------------------------
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\hooks\pre-commit.sample
----------------------------------------
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff-index --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\hooks\pre-merge-commit.sample
----------------------------------------
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\hooks\pre-push.sample
----------------------------------------
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\hooks\pre-rebase.sample
----------------------------------------
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"


A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\hooks\pre-receive.sample
----------------------------------------
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\hooks\prepare-commit-msg.sample
----------------------------------------
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\hooks\push-to-checkout.sample
----------------------------------------
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\hooks\sendemail-validate.sample
----------------------------------------
#!/bin/sh

# An example hook script to validate a patch (and/or patch series) before
# sending it via email.
#
# The hook should exit with non-zero status after issuing an appropriate
# message if it wants to prevent the email(s) from being sent.
#
# To enable this hook, rename this file to "sendemail-validate".
#
# By default, it will only check that the patch(es) can be applied on top of
# the default upstream branch without conflicts in a secondary worktree. After
# validation (successful or not) of the last patch of a series, the worktree
# will be deleted.
#
# The following config variables can be set to change the default remote and
# remote ref that are used to apply the patches against:
#
#   sendemail.validateRemote (default: origin)
#   sendemail.validateRemoteRef (default: HEAD)
#
# Replace the TODO placeholders with appropriate checks according to your
# needs.

validate_cover_letter () {
	file="$1"
	# TODO: Replace with appropriate checks (e.g. spell checking).
	true
}

validate_patch () {
	file="$1"
	# Ensure that the patch applies without conflicts.
	git am -3 "$file" || return
	# TODO: Replace with appropriate checks for this patch
	# (e.g. checkpatch.pl).
	true
}

validate_series () {
	# TODO: Replace with appropriate checks for the whole series
	# (e.g. quick build, coding style checks, etc.).
	true
}

# main -------------------------------------------------------------------------

if test "$GIT_SENDEMAIL_FILE_COUNTER" = 1
then
	remote=$(git config --default origin --get sendemail.validateRemote) &&
	ref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&
	worktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&
	git worktree add -fd --checkout "$worktree" "refs/remotes/$remote/$ref" &&
	git config --replace-all sendemail.validateWorktree "$worktree"
else
	worktree=$(git config --get sendemail.validateWorktree)
fi || {
	echo "sendemail-validate: error: failed to prepare worktree" >&2
	exit 1
}

unset GIT_DIR GIT_WORK_TREE
cd "$worktree" &&

if grep -q "^diff --git " "$1"
then
	validate_patch "$1"
else
	validate_cover_letter "$1"
fi &&

if test "$GIT_SENDEMAIL_FILE_COUNTER" = "$GIT_SENDEMAIL_FILE_TOTAL"
then
	git config --unset-all sendemail.validateWorktree &&
	trap 'git worktree remove -ff "$worktree"' EXIT &&
	validate_series
fi

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\hooks\update.sample
----------------------------------------
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\info\exclude
----------------------------------------
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\info\refs
----------------------------------------
b03a49a6ac59875ea808e8e5fae5fd3ae5d9a675	refs/heads/main
d165918cd4e80e842cb7f03abbf86ed3c8eb42e4	refs/remotes/origin/HEAD
d165918cd4e80e842cb7f03abbf86ed3c8eb42e4	refs/remotes/origin/main

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\logs\HEAD
----------------------------------------
0000000000000000000000000000000000000000 cbc113c60c493ff52fb8c33fc74222500540e35d fourtytwo42 <erics.cellphone@gmail.com> 1740406095 -0700	commit (initial): Initial commit
cbc113c60c493ff52fb8c33fc74222500540e35d b119edd29b0836ccbb28e0811f1b275ae1fc8607 fourtytwo42 <erics.cellphone@gmail.com> 1740406177 -0700	commit: Updated gitignore
b119edd29b0836ccbb28e0811f1b275ae1fc8607 d165918cd4e80e842cb7f03abbf86ed3c8eb42e4 fourtytwo42 <erics.cellphone@gmail.com> 1740412405 -0700	commit: AI Template
d165918cd4e80e842cb7f03abbf86ed3c8eb42e4 b03a49a6ac59875ea808e8e5fae5fd3ae5d9a675 fourtytwo42 <erics.cellphone@gmail.com> 1740414557 -0700	commit: Updated contracts and tests

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\logs\refs\heads\main
----------------------------------------
0000000000000000000000000000000000000000 cbc113c60c493ff52fb8c33fc74222500540e35d fourtytwo42 <erics.cellphone@gmail.com> 1740406095 -0700	commit (initial): Initial commit
cbc113c60c493ff52fb8c33fc74222500540e35d b119edd29b0836ccbb28e0811f1b275ae1fc8607 fourtytwo42 <erics.cellphone@gmail.com> 1740406177 -0700	commit: Updated gitignore
b119edd29b0836ccbb28e0811f1b275ae1fc8607 d165918cd4e80e842cb7f03abbf86ed3c8eb42e4 fourtytwo42 <erics.cellphone@gmail.com> 1740412405 -0700	commit: AI Template
d165918cd4e80e842cb7f03abbf86ed3c8eb42e4 b03a49a6ac59875ea808e8e5fae5fd3ae5d9a675 fourtytwo42 <erics.cellphone@gmail.com> 1740414557 -0700	commit: Updated contracts and tests

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\logs\refs\remotes\origin\HEAD
----------------------------------------
0000000000000000000000000000000000000000 cbc113c60c493ff52fb8c33fc74222500540e35d Eric Henderson <Hendo420@Silverbacks.cash> 1740406118 -0700	remote set-head
b119edd29b0836ccbb28e0811f1b275ae1fc8607 b119edd29b0836ccbb28e0811f1b275ae1fc8607 Eric Henderson <Hendo420@Silverbacks.cash> 1740406185 -0700	remote set-head
b119edd29b0836ccbb28e0811f1b275ae1fc8607 b119edd29b0836ccbb28e0811f1b275ae1fc8607 Eric Henderson <Hendo420@Silverbacks.cash> 1740408243 -0700	remote set-head
b119edd29b0836ccbb28e0811f1b275ae1fc8607 b119edd29b0836ccbb28e0811f1b275ae1fc8607 Eric Henderson <Hendo420@Silverbacks.cash> 1740410065 -0700	remote set-head
b119edd29b0836ccbb28e0811f1b275ae1fc8607 b119edd29b0836ccbb28e0811f1b275ae1fc8607 Eric Henderson <Hendo420@Silverbacks.cash> 1740411890 -0700	remote set-head
d165918cd4e80e842cb7f03abbf86ed3c8eb42e4 d165918cd4e80e842cb7f03abbf86ed3c8eb42e4 Eric Henderson <Hendo420@Silverbacks.cash> 1740412409 -0700	remote set-head
d165918cd4e80e842cb7f03abbf86ed3c8eb42e4 d165918cd4e80e842cb7f03abbf86ed3c8eb42e4 Eric Henderson <Hendo420@Silverbacks.cash> 1740414319 -0700	remote set-head
d165918cd4e80e842cb7f03abbf86ed3c8eb42e4 d165918cd4e80e842cb7f03abbf86ed3c8eb42e4 Eric Henderson <Hendo420@Silverbacks.cash> 1740416140 -0700	remote set-head

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\logs\refs\remotes\origin\main
----------------------------------------
0000000000000000000000000000000000000000 cbc113c60c493ff52fb8c33fc74222500540e35d fourtytwo42 <erics.cellphone@gmail.com> 1740406113 -0700	update by push
cbc113c60c493ff52fb8c33fc74222500540e35d b119edd29b0836ccbb28e0811f1b275ae1fc8607 fourtytwo42 <erics.cellphone@gmail.com> 1740406182 -0700	update by push
b119edd29b0836ccbb28e0811f1b275ae1fc8607 d165918cd4e80e842cb7f03abbf86ed3c8eb42e4 fourtytwo42 <erics.cellphone@gmail.com> 1740412408 -0700	update by push

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\objects\info\packs
----------------------------------------
P pack-2a2759ac725d5dbbb01a0704ae621806c0172215.pack


========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\packed-refs
----------------------------------------
# pack-refs with: peeled fully-peeled sorted 
b03a49a6ac59875ea808e8e5fae5fd3ae5d9a675 refs/heads/main
d165918cd4e80e842cb7f03abbf86ed3c8eb42e4 refs/remotes/origin/main

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.git\refs\remotes\origin\HEAD
----------------------------------------
ref: refs/remotes/origin/main

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.gitattributes
----------------------------------------
# Auto detect text files and perform LF normalization
* text=auto

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\.gitignore
----------------------------------------
# env file
.env

#compiled contracts
.json

# Log file
*.log

# BlueJ files
*.ctxt

# Mobile Tools for Java (J2ME)
.mtj.tmp/

# Package Files #
*.jar
*.war
*.nar
*.ear
*.zip
*.tar.gz
*.rar

# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
hs_err_pid*
replay_pid*

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\silverbacks-project\.env
----------------------------------------
# .env
# Replace with your actual private key and RPC URL for sepolia
PRIVATE_KEY="6997968c0ba1d8baba956d61cf009e10ef7d75702cfdf0a19ce649de50bc4c3e"
RPC_URL="https://sepolia.infura.io/v3/2Q0R8fv3ju7Nat5qCt0Rdreluqb"
========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\silverbacks-project\contracts\MyStableCoin.sol
----------------------------------------
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

/**
 * MyStableCoin:
 * A simple ERC20 token representing a "stablecoin" for the Silverbacks system.
 */
contract MyStableCoin is ERC20 {
    constructor(string memory name, string memory symbol) ERC20(name, symbol) {
        // Optionally mint initial supply to deployer if desired.
        // _mint(msg.sender, 1000000 * 10**18);
    }

    function mint(address to, uint256 amount) external {
        // Public mint function for testing/demonstration.
        _mint(to, amount);
    }
}

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\silverbacks-project\contracts\SilverbacksNFT.sol
----------------------------------------
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "hardhat/console.sol";  // For debugging/logging
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

/**
 * SilverbacksNFT:
 * Each token represents a $100 (or configurable) bill.
 * The NFT includes metadata handling and a burn function.
 */
contract SilverbacksNFT is ERC721, Ownable {

    // Mapping from tokenId to face value in stablecoin units (e.g., 100 for $100).
    mapping (uint256 => uint256) public faceValue;
    string private _baseTokenURI;

    // The vault (main contract) can mint and burn tokens.
    address public vaultContract;

    event MintedSilverback(uint256 indexed tokenId, address indexed owner, uint256 value);
    event BurnedSilverback(uint256 indexed tokenId, address indexed burner);

    constructor(string memory name, string memory symbol) ERC721(name, symbol) {
        // Initialize base URI if needed.
    }

    function setVaultContract(address _vaultContract) external onlyOwner {
        vaultContract = _vaultContract;
    }

    function setBaseURI(string memory baseURI) external onlyOwner {
        _baseTokenURI = baseURI;
    }

    function _baseURI() internal view override returns (string memory) {
        return _baseTokenURI;
    }

    /**
     * Mint a new Silverback NFT.
     * Can only be called by the contract owner or the designated vault contract.
     */
    function mintNote(address to, uint256 tokenId, uint256 value) external {
        console.log("SilverbacksNFT.mintNote called by: %s", msg.sender);
        console.log("Parameters: to = %s, tokenId = %s, value = %s", to, tokenId, value);

        require(msg.sender == owner() || msg.sender == vaultContract, "Not authorized to mint");
        _safeMint(to, tokenId);
        faceValue[tokenId] = value;
        console.log("NFT minted: tokenId = %s, face value = %s", tokenId, value);
        emit MintedSilverback(tokenId, to, value);
    }

    /**
     * Burn the NFT.
     * Can be called by the token owner or the vault contract.
     */
    function burn(uint256 tokenId) external {
        console.log("SilverbacksNFT.burn called by: %s, tokenId: %s", msg.sender, tokenId);
        require(_isApprovedOrOwner(msg.sender, tokenId) || msg.sender == vaultContract, "Not authorized to burn");
        _burn(tokenId);
        delete faceValue[tokenId];
        console.log("NFT burned: tokenId = %s", tokenId);
        emit BurnedSilverback(tokenId, msg.sender);
    }
}

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\silverbacks-project\contracts\SilverbacksVault.sol
----------------------------------------
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

import "hardhat/console.sol";  // For debugging/logging
import "@openzeppelin/contracts/access/Ownable.sol";
import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "./SilverbacksNFT.sol";

/**
 * SilverbacksVault:
 * - Handles deposits of stablecoins and mints batch NFTs accordingly.
 * - Manages NFT redemption by burning NFTs and releasing locked stablecoins.
 *
 * NOTE on decimals:
 *   - The MyStableCoin is assumed to have 18 decimals (standard ERC-20).
 *   - Each "Silverback" NFT is notionally worth $100, so in base ERC-20 units,
 *     that is 100 * 10^18 = 100e18. We'll call this NOTE_SIZE.
 *   - We store the NFT's faceValue as just "100" (an integer) so the tests can
 *     compare to 100 directly. But when actually transferring stablecoins, we
 *     multiply that faceValue by 1e18 to handle decimals correctly.
 */
contract SilverbacksVault is Ownable {

    // The underlying stablecoin contract (assumed 18 decimals).
    IERC20 public stableCoin;

    // The Silverbacks NFT contract that this vault mints/burns.
    SilverbacksNFT public silverbacksNFT;

    // Next token ID to use when minting new NFTs.
    uint256 public nextTokenId;

    // Each "silverback" represents $100 in stableCoin, i.e. 100 * 1e18 base units.
    uint256 private constant NOTE_SIZE = 100 * 10**18;

    event Deposited(address indexed depositor, uint256 depositAmount, uint256 mintedCount, uint256 remainder);
    event Redeemed(address indexed redeemer, uint256 tokenId, uint256 faceValue);

    constructor(address _stableCoin, address _silverbacksNFT) {
        stableCoin = IERC20(_stableCoin);
        silverbacksNFT = SilverbacksNFT(_silverbacksNFT);
        nextTokenId = 0;
    }

    /**
     * Deposit stablecoins in multiples of $100. If depositAmount is not a multiple
     * of $100 * 1e18, the remainder is refunded to the user.
     *
     * Examples:
     *  - If user deposits 102 * 1e18, that's "102 tokens". We mint 1 NFT
     *    (for 100 tokens) and refund 2 tokens.
     */
    function deposit(uint256 depositAmount) external {
        console.log("SilverbacksVault.deposit called by: %s", msg.sender);
        console.log("Deposit amount: %s base units (i.e. 1e18 = 1 token)", depositAmount);

        require(depositAmount >= NOTE_SIZE, "Minimum deposit is $100 worth of tokens");

        // 1. Transfer stablecoins from user to this contract
        require(
            stableCoin.transferFrom(msg.sender, address(this), depositAmount),
            "Transfer failed"
        );

        // 2. Figure out how many full "100 USD notes" we can mint
        uint256 numFullNotes = depositAmount / NOTE_SIZE;
        uint256 remainder    = depositAmount % NOTE_SIZE;

        // 3. Refund remainder if any
        if (remainder > 0) {
            console.log("Refunding remainder: %s base units", remainder);
            require(
                stableCoin.transfer(msg.sender, remainder),
                "Refund transfer failed"
            );
        }

        // 4. Mint an NFT for each full $100
        for (uint256 i = 0; i < numFullNotes; i++) {
            uint256 tokenId = nextTokenId;
            nextTokenId++;
            console.log("Minting NFT with tokenId: %s for depositor: %s", tokenId, msg.sender);

            // The NFT's faceValue is stored as "100" (no decimals).
            silverbacksNFT.mintNote(msg.sender, tokenId, 100);
        }

        emit Deposited(msg.sender, depositAmount, numFullNotes, remainder);
    }

    /**
     * Redeem an NFT for stablecoins. The NFT must belong to the caller.
     * We burn the NFT and transfer the stablecoins.
     */
    function redeem(uint256 tokenId) external {
        console.log(
            "SilverbacksVault.redeem called by: %s for tokenId: %s",
            msg.sender,
            tokenId
        );

        // 1. Verify the caller owns the NFT
        require(silverbacksNFT.ownerOf(tokenId) == msg.sender, "Not NFT owner");

        // 2. Look up the integer faceValue in the NFT (e.g., 100)
        uint256 nominalValue = silverbacksNFT.faceValue(tokenId);
        console.log("Redeeming NFT with faceValue: %s (in 'whole tokens')", nominalValue);

        // 3. Burn the NFT
        silverbacksNFT.burn(tokenId);

        // 4. Transfer the stablecoins. Multiply by 1e18 because
        //    'nominalValue=100' => '100 * 1e18' actual base units.
        uint256 actualAmount = nominalValue * 10**18;
        require(
            stableCoin.transfer(msg.sender, actualAmount),
            "Stablecoin transfer failed"
        );

        emit Redeemed(msg.sender, tokenId, nominalValue);
    }
}

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\silverbacks-project\hardhat.config.js
----------------------------------------
require("@nomiclabs/hardhat-ethers");
require("dotenv").config();

const { PRIVATE_KEY, RPC_URL } = process.env;

/**
 * @type import('hardhat/config').HardhatUserConfig
 */
module.exports = {
  // Use Hardhat's built-in local network by default.
  defaultNetwork: "hardhat",
  solidity: {
    version: "0.8.17",
    settings: {
      optimizer: {
        enabled: true,
        runs: 200
      }
    }
  },
  networks: {
    hardhat: {
      // Hardhat's built-in network with default settings.
    },
    localhost: {
      url: "http://127.0.0.1:8545"
    },
    sepolia: {
      url: RPC_URL || "",
      accounts: PRIVATE_KEY ? [PRIVATE_KEY] : []
    }
  }
};

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\silverbacks-project\scripts\deploy.js
----------------------------------------
const { ethers } = require("hardhat");

async function main() {
  // 1) Deploy MyStableCoin
  const StableCoin = await ethers.getContractFactory("MyStableCoin");
  const stableCoin = await StableCoin.deploy("MyStableCoin", "MSC");
  await stableCoin.deployed();
  console.log("StableCoin deployed at:", stableCoin.address);

  // 2) Deploy SilverbacksNFT
  const SilverbacksNFT = await ethers.getContractFactory("SilverbacksNFT");
  const nft = await SilverbacksNFT.deploy("SilverbacksNFT", "SBX");
  await nft.deployed();
  console.log("SilverbacksNFT deployed at:", nft.address);

  // 3) Deploy SilverbacksVault
  const SilverbacksVault = await ethers.getContractFactory("SilverbacksVault");
  const vault = await SilverbacksVault.deploy(stableCoin.address, nft.address);
  await vault.deployed();
  console.log("SilverbacksVault deployed at:", vault.address);

  // Configure NFT so vault can mint/burn
  let tx = await nft.setVaultContract(vault.address);
  await tx.wait();
  console.log("Vault contract set in SilverbacksNFT");

  // Optional: Mint some stablecoins for deployer to test
  const [deployer] = await ethers.getSigners();
  tx = await stableCoin.mint(deployer.address, ethers.utils.parseUnits("10000", 18));
  await tx.wait();
  console.log("Minted 10000 stablecoins to deployer.");

  console.log("Deployment complete.");
}

main()
  .then(() => process.exit(0))
  .catch(err => {
    console.error("Error in deployment:", err);
    process.exit(1);
  });

========================================

----------------------------------------
C:\Users\hendo420\Documents\Github\EthDenver-Silverbacks-2025\silverbacks-project\test\main.test.js
----------------------------------------
const { expect } = require("chai");
const { ethers, network } = require("hardhat");

describe("Silverbacks Basic Tests", function() {
  let stableCoin, nft, vault;
  let owner, addr1, addr2;

  beforeEach(async () => {
    // Reset the Hardhat network to ensure a fresh state for every test run.
    await network.provider.send("hardhat_reset", []);

    [owner, addr1, addr2] = await ethers.getSigners();

    // Deploy the StableCoin contract.
    const StableCoin = await ethers.getContractFactory("MyStableCoin");
    stableCoin = await StableCoin.deploy("MyStableCoin", "MSC");
    await stableCoin.deployed();

    // Deploy the SilverbacksNFT contract.
    const SilverbacksNFT = await ethers.getContractFactory("SilverbacksNFT");
    nft = await SilverbacksNFT.deploy("SilverbacksNFT", "SBX");
    await nft.deployed();

    // Deploy the SilverbacksVault contract.
    const SilverbacksVault = await ethers.getContractFactory("SilverbacksVault");
    vault = await SilverbacksVault.deploy(stableCoin.address, nft.address);
    await vault.deployed();

    // Set the vault contract address in the NFT contract.
    await nft.setVaultContract(vault.address);

    // Mint some stablecoins to addr1 for testing.
    await stableCoin.mint(addr1.address, ethers.utils.parseUnits("1000", 18));
  });

  it("Should deposit $102, mint 1 NFT, and refund the remainder of 2", async () => {
    // Approve the vault to spend 102 stablecoins from addr1.
    await stableCoin.connect(addr1).approve(vault.address, ethers.utils.parseUnits("102", 18));

    // Call deposit with 102 stablecoins; expect 1 NFT minted and 2 refunded.
    await vault.connect(addr1).deposit(ethers.utils.parseUnits("102", 18), { gasLimit: 10000000 });

    // Verify that addr1 now holds exactly 1 NFT.
    expect(await nft.balanceOf(addr1.address)).to.equal(1);

    // Check addr1's stablecoin balance:
    // Starting balance: 1000, deposit used: 102, but 2 refunded, so 100 tokens locked => expected balance = 1000 - 100 = 900.
    const finalBal = await stableCoin.balanceOf(addr1.address);
    expect(finalBal).to.equal(ethers.utils.parseUnits("900", 18));

    // Verify that the minted NFT (tokenId = 0) has a face value of 100.
    const tokenId = 0;
    expect(await nft.faceValue(tokenId)).to.equal(100);
  });

  it("Should redeem an NFT and return stablecoins to the redeemer", async () => {
    // Approve the vault to spend 200 stablecoins and deposit $200 to mint 2 NFTs.
    await stableCoin.connect(addr1).approve(vault.address, ethers.utils.parseUnits("200", 18));
    await vault.connect(addr1).deposit(ethers.utils.parseUnits("200", 18), { gasLimit: 10000000 });
    expect(await nft.balanceOf(addr1.address)).to.equal(2);

    // Redeem the NFT with tokenId 0.
    await vault.connect(addr1).redeem(0, { gasLimit: 10000000 });

    // After depositing 200 stablecoins, addr1's balance would drop to 800.
    // Redeeming tokenId 0 should return 100 stablecoins, so the final balance should be 900.
    const finalBal = await stableCoin.balanceOf(addr1.address);
    expect(finalBal).to.equal(ethers.utils.parseUnits("900", 18));
  });
});

========================================

